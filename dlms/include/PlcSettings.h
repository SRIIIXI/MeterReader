#ifndef PLC_SETTINGS_H
#define PLC_SETTINGS_H

#include <vector>
#include "Enums.h"
#include "ByteBuffer.h"
#include "DLMSPlcRegister.h"
#include "DLMSPlcMeterInfo.h"

class DLMSSettings;

// PLC communication settings.
class PlcSettings
{
    ByteBuffer m_SystemTitle;
    DLMSSettings* m_Settings;

    /**
     * Initial credit (IC) tells how many times the frame must be repeated.
     * Maximum value is 7.
     */
    unsigned char m_InitialCredit;
    /**
     * The current credit (CC) initial value equal to IC and automatically
     * decremented by the MAC layer after each repetition. Maximum value is 7.
     */
    unsigned char m_CurrentCredit;

    /**
     * Delta credit (DC) is used by the system management application entity
     * (SMAE) of the Client for credit management, while it has no meaning for a
     * Server or a REPEATER. It represents the difference(IC-CC) of the last
     * communication originated by the system identified by the DA address to
     * the system identified by the SA address. Maximum value is 3.
     */
    unsigned char m_DeltaCredit;
    /**
     * Source MAC address.
     */
    uint16_t m_MacSourceAddress;
    /**
     * Destination MAC address.
     */
    uint16_t m_MacDestinationAddress;
    /**
     * Response probability.
     */
    unsigned char m_ResponseProbability;
    /**
     * Allowed time slots.
     */
    uint16_t m_AllowedTimeSlots;
    /**
     * Server saves client system title.
     */
    ByteBuffer m_ClientSystemTitle;

public:
    /**
     * Initial credit (IC) tells how many times the frame must be
     *         repeated. Maximum value is 7.
     */
    unsigned char GetInitialCredit();
    void SetInitialCredit(unsigned char value);

    /**
     * The current credit (CC) initial value equal to IC and
     *         automatically decremented by the MAC layer after each repetition.
     *         Maximum value is 7.
     */
    unsigned char GetCurrentCredit();
    void SetCurrentCredit(unsigned char value);

    /**
     * Delta credit (DC) value.
     */
    unsigned char GetDeltaCredit();
    void SetDeltaCredit(unsigned char value);

    /**
     * IEC 61334-4-32 LLC uses 6 bytes long system title. IEC 61334-5-1
     *         uses 8 bytes long system title so we can use the default one.
     */
    ByteBuffer& GetSystemTitle();
    void SetSystemTitle(ByteBuffer& value);

    /**
     * Source MAC address.
     */
    uint16_t GetMacSourceAddress();
    void SetMacSourceAddress(uint16_t value);

    /**
     * Destination MAC address.
     */
    uint16_t GetMacDestinationAddress();
    void SetMacDestinationAddress(uint16_t value);

    /**
     * Response probability.
     */
    unsigned char GetResponseProbability();
    void SetResponseProbability(unsigned char value);

    /**
     * Allowed time slots.
     */
    uint16_t GetAllowedTimeSlots();
    void SetAllowedTimeSlots(uint16_t value);

    /**
     * Server saves client system title.
     */
    ByteBuffer& GetClientSystemTitle();
    void SetClientSystemTitle(ByteBuffer& value);

    //Reset settings to default values.
    void Reset();

    //Constructor.
    PlcSettings(DLMSSettings* settings);

    /**
     * Discover available  meters.
     *
     * @return Generated bytes.
     */
    int DiscoverRequest(ByteBuffer& data);

    /**
     * Generates discover report.
     *
     * systemTitle: System title
     * newMeter: Is this a new meter.
     * data: Generated bytes.
     * Returns error code.
     */
    int DiscoverReport(ByteBuffer& systemTitle, bool newMeter, ByteBuffer& data);

    /**
     * Parse discover reply.
     *
     * value: Received data.
     * sa: Source address.
     * da: Destination address.
     * list: Array of system titles and alarm descriptor error code
     */
    int ParseDiscover(ByteBuffer& value, uint16_t sa, uint16_t da, std::vector<DLMSPlcMeterInfo>& list);

    /**
     * Register  meters.
     *
     * @param initiatorSystemTitle
     *            Active initiator system title
     * @param systemTitle SystemTitle
     * @param data Generated bytes
     * @return Error code.
     */
    int RegisterRequest(ByteBuffer& initiatorSystemTitle, ByteBuffer& systemTitle, ByteBuffer& data);

    /**
     * Parse register request.
     *
     * @return System title mac address.
     */
    int ParseRegisterRequest(ByteBuffer& value);

    /**
     * Parse discover request.
     *
     * data: Received data.
     * Returns: Error code.
     */
    int ParseDiscoverRequest(ByteBuffer& data, DLMSPlcRegister& reg);

    /**
     * Ping  meter.
     *
     * data: Generated bytes.
     * Returns: Error code.
     */
    int PingRequest(ByteBuffer& systemTitle, ByteBuffer& data);

    /**
     * Parse ping response.
     *
     * data: Received data.
     * Returns: Error code.
     */
    int ParsePing(ByteBuffer& data, ByteBuffer& value);

    /**
     * Repear call request.
     *
     * data: Generated bytes.
     * Returns: Error code.
     */
    int RepeaterCallRequest(ByteBuffer& data);
};

#endif
